进程查看/调度


进程	Process 

	计算机能够执行最小的任务单位，进程 

	进程： 
	
		内核空间进程
			内核启动的进程
			
		用户空间进程
			
	

静态查看进程的状态

	# ps aux  
	# ps -elf 
	
	
	查看进程树
	
	# pstree 
	
	
	
	

STAT	进程的状态

	D：不可中断的睡眠 (等待磁盘IO完成)
	S：可中断的睡眠(不需要等待磁盘IO完成） 
	R：运行或就绪  Running
	T：停止
	Z：僵尸		Zombie
	
	<：高优先级进程 
		会被CPU优先执行
		会获取更多的CPU执行时间
		
	N：低优先级进程 
	+：前台进程组中的进程 
	l：多线程进程(Thread)
	s：会话进程首进程，某一个连接的父进程 


[root@localhost ~]# ps aux | less 
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.0  19364  1536 ?        Ss   09:05   0:00 /sbin/init
root         2  0.0  0.0      0     0 ?        S    09:05   0:00 [kthreadd]
root         3  0.0  0.0      0     0 ?        S    09:05   0:00 [migration/0]
root         4  0.0  0.0      0     0 ?        S    09:05   0:00 [ksoftirqd/0]

	带有方括号为系统进行(Linux内核启动)
	无方括号的(用户进程)
	

[root@localhost ~]# ps aux | grep vim
root      5550  0.2  0.0 143972  3760 pts/2    S+   10:25   0:00 vim /etc/fstab
root      5564  0.0  0.0 103260   860 pts/0    S+   10:25   0:00 grep --color vim




	-e	显示所有进程 	
	-l 	详细信息
	-f 	以长格式显示(更多字段内容)


[root@localhost ~]# ps -elf | less

F S UID        PID  PPID  C PRI  NI ADDR SZ WCHAN  STIME TTY          TIME CMD
4 S root         1     0  0  80   0 -  4841 poll_s 09:05 ?        00:00:00 /sbin/init
1 S root         2     0  0  80   0 -     0 kthrea 09:05 ?        00:00:00 [kthreadd]
1 S root         3     2  0 -40   - -     0 migrat 09:05 ?        00:00:00 [migration/0]
1 S root         4     2  0  80   0 -     0 ksofti 09:05 ?        00:00:00 [ksoftirqd/0]
1 S root         5     2  0 -40   - -     0 cpu_st 09:05 ?        00:00:00 [stopper/0]
5 S root         6     2  0 -40   - -     0 watchd 09:05 ?        00:00:00 [watchdog/0]
1 S root         7     2  0 -40   - -     0 migrat 09:05 ?        00:00:00 [migration/1]

进程优先级：

	0----139
	
	数据越小，越先级越高 

高优先级进程：
	获取CPU更多的执行时间
	会被CPU优先执行

nice值：

	新优先级＝旧优先级＋NICE值

	-20----19 
	
	普通用户仅能够调大nice值，即降低进程优先级
	root用户可随意调整nice值
	

[root@lvm_raid ~]# ps -elf | grep "vim"
0 S root      1071  1036  0  80   0 - 38463 poll_s 11:28 pts/1    00:00:00 vim /etc/fstab
0 R root      1074  1004  0  80   0 - 28161 -      11:28 pts/0    00:00:00 grep --color=auto vim

[root@lvm_raid ~]# renice -n 10 1071
1071 (process ID) old priority 0, new priority 10


[root@lvm_raid ~]# ps -elf | grep "vim"
0 S root      1071  1036  0  90  10 - 38463 poll_s 11:28 pts/1    00:00:00 vim /etc/fstab
0 R root      1077  1004  0  80   0 - 28161 -      11:29 pts/0    00:00:00 grep --color=auto vim



[root@lvm_raid ~]# ps -elf | grep "vim"
0 S root      1071  1036  0  90  10 - 38463 poll_s 11:28 pts/1    00:00:00 vim /etc/fstab
0 R root      1079  1004  0  80   0 - 28161 -      11:30 pts/0    00:00:00 grep --color=auto vim

[root@lvm_raid ~]# renice -n -20 1071
1071 (process ID) old priority 10, new priority -20

[root@lvm_raid ~]# ps -elf | grep "vim"
0 S root      1071  1036  0  60 -20 - 38463 poll_s 11:28 pts/1    00:00:00 vim /etc/fstab
0 R root      1082  1004  0  80   0 - 28161 -      11:30 pts/0    00:00:00 grep --color=auto vim
[root@lvm_raid ~]# 

	
	

显示进程树 

[root@lvm_raid ~]# pstree
systemd─┬─NetworkManager─┬─dhclient
        │                └─2*[{NetworkManager}]
        ├─auditd───{auditd}
        ├─crond
        ├─dbus-daemon
        ├─login───bash
        ├─lvmetad
        ├─master─┬─pickup
        │        └─qmgr
        ├─polkitd───5*[{polkitd}]
        ├─rsyslogd───2*[{rsyslogd}]
        ├─sshd─┬─sshd───bash───pstree
        │      └─sshd───bash



显示进程PID  

[root@localhost ~]# pidof vim
5696
[root@localhost ~]# 


显示指定用户启动的进程PID

[root@node01 ~]# pgrep -u martin
32032
32075
32115


[root@node01 ~]# pgrep -u martin -l
32032 bash
32075 bash
32115 vim










动态查看进程的状态 

# top 

top - 10:53:46 up  1:48,  3 users,  load average: 0.12, 0.19, 0.16
Tasks: 239 total,   2 running, 237 sleeping,   0 stopped,   0 zombie
Cpu(s):  7.6%us,  1.6%sy,  0.0%ni, 90.6%id,  0.0%wa,  0.0%hi,  0.2%si,  0.0%st
Mem:  16084568k total,  2529012k used, 13555556k free,    70044k buffers
Swap:  8388604k total,        0k used,  8388604k free,   626388k cached

	 7.6%us	用户进程占用的CPU
	 1.6%sy  	系统进程占用的CPU
	 0.0%ni	调整过优先级的进程占用的CPU
	 90.6%id	CPU空闲
	 0.0%wa	等待磁盘IO的进程所占用的CPU
	
Cpu(s)：显示所有CPU平均比，按1可显示每颗CPU的使用情况


buffer 缓冲
	
	向块设备文件保存数据，数据先进buffer，再同步给硬盘 


cache  缓存

	cpu读取硬盘数据时，数据先到cache， 再转交给CPU处理 





top交互式指令 ：

	M：按内存使用排序
	P：按CPU使用排序
	T：按运行时间排序 
	
	c：是否显示完整的命令行
	q：退出TOP


显示当前时刻CPU的使用情况

[root@localhost ~]# uptime 
 11:00:25 up  1:54,  3 users,  load average: 0.39, 0.26, 0.19


top选项：

	-d 1：指定top信息刷新的频率
	-b：以批模式显示进程信息
	-n 2：共显示两批信息 

# top -d 1 -b -n 2 
















查看服务器性能：

	1、ps, top 
	2、df -hT 
	3、free -m 
	
[root@localhost ~]# uptime 
 11:39:00 up  3:24,  4 users,  load average: 0.00, 0.01, 0.05

	
	# mpstat			查看CPU 
	# vmstat			查看内存 
	# iostat			查看磁盘

[root@localhost ~]# rpm -qf /usr/bin/iostat 
sysstat-10.1.5-7.el7.x86_64
[root@localhost ~]# 




进程控制

	信号：Signal


查看所有信号 

[root@localhost ~]# kill -l
 1) SIGHUP	 2) SIGINT	 3) SIGQUIT	 4) SIGILL	 5) SIGTRAP
 6) SIGABRT	 7) SIGBUS	 8) SIGFPE	 9) SIGKILL	10) SIGUSR1
11) SIGSEGV	12) SIGUSR2	13) SIGPIPE	14) SIGALRM	15) SIGTERM
16) SIGSTKFLT	17) SIGCHLD	18) SIGCONT	19) SIGSTOP	20) SIGTSTP
21) SIGTTIN		22) SIGTTOU	23) SIGURG	24) SIGXCPU	25) SIGXFSZ
26) SIGVTALRM	27) SIGPROF	28) SIGWINCH	29) SIGIO	30) SIGPWR
31) SIGSYS	34) SIGRTMIN	35) SIGRTMIN+1	36) SIGRTMIN+2	37) SIGRTMIN+3
38) SIGRTMIN+4	39) SIGRTMIN+5	40) SIGRTMIN+6	41) SIGRTMIN+7	42) SIGRTMIN+8
43) SIGRTMIN+9	44) SIGRTMIN+10	45) SIGRTMIN+11	46) SIGRTMIN+12	47) SIGRTMIN+13
48) SIGRTMIN+14	49) SIGRTMIN+15	50) SIGRTMAX-14	51) SIGRTMAX-13	52) SIGRTMAX-12
53) SIGRTMAX-11	54) SIGRTMAX-10	55) SIGRTMAX-9	56) SIGRTMAX-8	57) SIGRTMAX-7
58) SIGRTMAX-6	59) SIGRTMAX-5	60) SIGRTMAX-4	61) SIGRTMAX-3	62) SIGRTMAX-2
63) SIGRTMAX-1	64) SIGRTMAX	


常用信号：

	1  SIGHUP 	让进程重新读取配置文件，使配置文件修改生效  
	9  SIGKILL：杀死一个进程
	15 SIGTERM：终止一个进程
	
	19  SIGSTOP 	挂起一个进程 
	18	SIGCONT		恢复一个挂起的进程 
	
	
# yum install -y httpd 
# systemctl start httpd  


# vim /etc/httpd/conf/httpd.conf 

	Listen 80 
	

如何调用一个信号？

	信号号码：kill -9 <PID>
	信号名称：kill -SIGKILL <PID>
	信号名称简写：kill -KILL <PID>

# kill <PID> 

# killall <PROCESS_NAME>



控制进程的运行方式(前台/后台)

	前台： 占用命令提示符 

1)　控制命令在后台运行 

# command & 

[root@localhost ~]# firefox &


2) 查看后台的应用程序 

[root@localhost ~]# jobs -l
[1]+ 12066 Running                 firefox &


3)　将正在运行的指令放入后台，并暂停运行 

	ctrl+z 

4) 将后台的程序调回前台继续运行 

# fg <后台任务编号>

[root@localhost ~]# fg 1






计划任务 

类型：
	一次性计划任务
	周期性计划任务

一次性计划任务 

前提： atd服务必须运行 

[root@test01 ~]# systemctl status atd
● atd.service - Job spooling tools
   Loaded: loaded (/usr/lib/systemd/system/atd.service; enabled; vendor preset: enabled)
   Active: active (running) since 五 2017-02-17 17:26:29 CST; 3h 57min ago
 Main PID: 1269 (atd)
   CGroup: /system.slice/atd.service
           └─1269 /usr/sbin/atd -f

2月 17 17:26:29 localhost.localdomain systemd[1]: Started Job spooling tools.
2月 17 17:26:29 localhost.localdomain systemd[1]: Starting Job spooling tools...
[root@test01 ~]# 
[root@test01 ~]# 
[root@test01 ~]# systemctl is-active atd.service 
active



制订一次性计划任务 

# at <TIME>

[root@localhost ~]# at 15:30
at> poweroff
at> <EOT>
job 1 at 2016-11-20 15:30


[root@localhost ~]# at now + 1 minute
at> mkdir /tmp/aaaa
at> <EOT>
job 2 at 2016-11-20 13:16


周期性计划任务 

前提： crond服务必须运行 

[root@test01 ~]# systemctl status crond
● crond.service - Command Scheduler
   Loaded: loaded (/usr/lib/systemd/system/crond.service; enabled; vendor preset: enabled)
   Active: active (running) since 五 2017-02-17 17:26:29 CST; 4h 1min ago
 Main PID: 1267 (crond)
   CGroup: /system.slice/crond.service
           └─1267 /usr/sbin/crond -n

2月 17 17:26:29 localhost.localdomain systemd[1]: Started Command Scheduler.
2月 17 17:26:29 localhost.localdomain systemd[1]: Starting Command Scheduler...
2月 17 17:26:29 localhost.localdomain crond[1267]: (CRON) INFO (RANDOM_DELAY will be scaled with factor 67% if used.)
2月 17 17:26:30 localhost.localdomain crond[1267]: (CRON) INFO (running with inotify support)
[root@test01 ~]# 


制订周期性计划任务 

# crontab -e 

    时间            COMMAND命令 


时间：
    分  时  日   月   周 

    分钟：0----59 
    时：  0----23
    日期：1----31
    月：  1----12
    周：  0----6

示例：

每天晚上11：30      30 23 * * * 

每天零点             0 0 * * * 

每周五下午4点       0 16 * * 5 

-   连续的时间      5 8-14 * * * 

不连续的时间        5 8,10,12 * * * 

每5分钟             */5 * * * * 


COMMAND命令：
    1   建议写命令的完整路径 /bin/mkdir /abc
    2   只能写一条命令(shell脚本)


示例： 每分钟在/tmp目录创建文件 

[root@localhost ~]# crontab -e
*/1 * * * *	/usr/bin/touch /tmp/`date +\%F-\%T`.txt &> /dev/null 
 

注意：
	写命令时%在周期性计划任务中是结束的意思，因此在使用%时，需要加\右斜杠转义 
	&> /dev/null	不给用户发送邮件 


示例：	
	
1) 创建脚本文件  

[root@lvm_raid ~]# cat /root/test.sh 

#!/bin/bash


mkdir /tmp/testdir
touch /tmp/testdir/{1..100}.txt


2) 编辑计划任务 

[root@test01 ~]# crontab -l
*/1 * * * *	/usr/bin/touch /tmp/`date +\%F-\%T`.log &> /dev/null
*/30 * * * * 	/usr/bin/bash /root/test.sh


	
查看周期性计划任务 

[root@localhost ~]# crontab -l
*/1 * * * *	/bin/touch /tmp/`date +\%F-\%T`.txt
[root@localhost ~]# 


删除周期性计划任务

# crontab -r 			>>> 会删除所有计划任务



CentOS 7系统运行方式(target)：

	multi-user.target     字符模式(多用户模式)
	graphical.target 	  图形模式 

1、查看默认级别

[root@test01 ~]# systemctl get-default 
multi-user.target

2、修改默认级别

[root@test01 ~]# systemctl set-default graphical.target 

[root@test01 ~]# systemctl set-default multi-user.target 
	


CentOS 6系统运行方式：

	0	关机模式
	1	单用户模式(修复)
	2	字符模式(无网络)
	3	完全字符模式
	4	预留
	5	图形模式
	6	重启模式
	
编辑文件/etc/inittab修改默认的启动模式 


查看系统当前的运行模式 

[root@localhost ~]# runlevel 
N 3

























